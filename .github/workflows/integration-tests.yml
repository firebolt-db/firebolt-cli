name: Integration tests

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run the tests against'
        type: choice
        required: true
        default: 'dev'
        options:
          - dev
          - staging
  workflow_call:
    inputs:
      environment:
        default: 'staging'
        required: false
        type: string
      branch:
        required: false
        type: string
        description: 'Branch to run on'
    secrets:
      FIREBOLT_CLIENT_ID_STG_NEW_IDN:
        required: true
      FIREBOLT_CLIENT_SECRET_STG_NEW_IDN:
        required: true
      FIREBOLT_CLIENT_ID_DEV_NEW_IDN:
        required: true
      FIREBOLT_CLIENT_SECRET_DEV_NEW_IDN:
        required: true

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          ref: ${{ inputs.branch }}

      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ".[dev]"

      - name: Determine env variables
        run: |
          if [ "${{ inputs.environment }}" == 'staging' ]; then
             echo "CLIENT_ID=${{ secrets.FIREBOLT_CLIENT_ID_STG_NEW_IDN }}" >> "$GITHUB_ENV"
             echo "CLIENT_SECRET=${{ secrets.FIREBOLT_CLIENT_SECRET_STG_NEW_IDN }}" >> "$GITHUB_ENV"
          else
             echo "CLIENT_ID=${{ secrets.FIREBOLT_CLIENT_ID_DEV_NEW_IDN }}" >> "$GITHUB_ENV"
             echo "CLIENT_SECRET=${{ secrets.FIREBOLT_CLIENT_SECRET_DEV_NEW_IDN }}" >> "$GITHUB_ENV"
          fi

      - name: Setup database and engine
        id: setup
        uses: firebolt-db/integration-testing-setup@v2
        with:
          firebolt-client-id: ${{ env.CLIENT_ID }}
          firebolt-client-secret: ${{ env.CLIENT_SECRET }}
          account: ${{ vars.FIREBOLT_ACCOUNT }}
          api-endpoint: "api.${{ inputs.environment }}.firebolt.io"

      - name: Restore cached failed tests
        id: cache-tests-restore
        uses: actions/cache/restore@v3
        with:
          path: |
            .pytest_cache/v/cache/lastfailed
          key: ${{ runner.os }}-pytest-restore-failed-${{ github.ref }}-${{ github.sha }}
      
      - name: Run integration tests
        env:
          SERVICE_ID: ${{ env.CLIENT_ID }}
          SERVICE_SECRET: ${{ env.CLIENT_SECRET }}
          DATABASE_NAME: ${{ steps.setup.outputs.database_name }}
          ENGINE_NAME: ${{ steps.setup.outputs.engine_name }}
          STOPPED_ENGINE_NAME: ${{ steps.setup.outputs.stopped_engine_name }}
          API_ENDPOINT: "api.${{ inputs.environment }}.firebolt.io"
          ACCOUNT_NAME: ${{ vars.FIREBOLT_ACCOUNT }}
        run: |
          pytest --last-failed -m "not slow" -o log_cli=false -o log_cli_level=INFO tests/integration
      
      - name: Save failed tests
        id: cache-tests-save
        uses: actions/cache/save@v3
        if: failure()
        with:
          path: |
            .pytest_cache/v/cache/lastfailed
          key: ${{ steps.cache-tests-restore.outputs.cache-primary-key }}
